-- Crear tablas

CREATE TABLE Usuarios (
  idUsuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(150) NOT NULL,            
  email VARCHAR2(150) UNIQUE NOT NULL,      
  telefono VARCHAR2(30),           
  password VARCHAR2(512) NOT NULL,         
  tipo_usuario VARCHAR2(30) DEFAULT 'cliente' NOT NULL, 
  fecha_registro DATE DEFAULT SYSDATE NOT NULL,
  activo VARCHAR2(3) DEFAULT 'Sí' NOT NULL,  
  CONSTRAINT chk_tipo_usuario CHECK (tipo_usuario IN ('cliente', 'administrador')),
  CONSTRAINT chk_activo_usuario CHECK (activo IN ('Sí', 'No'))
);

CREATE TABLE Categorias (
  idCategorias NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Nombre VARCHAR2(45),
  Descripcion VARCHAR2(45),
  Activo VARCHAR2(45)
);

CREATE TABLE Provincias (
  idProvincias NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombreProvincia VARCHAR2(45) NOT NULL
);

CREATE TABLE Cantones (
  idCantones NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombreCanton VARCHAR2(45),
  idProvincias NUMBER NOT NULL,
  CONSTRAINT fk_Cantones_Provincias1 FOREIGN KEY (idProvincias) REFERENCES Provincias (idProvincias)
);

CREATE TABLE Distritos (
  idDistritos NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombreDistrito VARCHAR2(45) NOT NULL,
  idCantones NUMBER NOT NULL,
  CONSTRAINT fk_Distritos_Cantones1 FOREIGN KEY (idCantones) REFERENCES Cantones (idCantones)
);

CREATE TABLE Proveedor (
  idProveedor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NombreProveedor VARCHAR2(45) NOT NULL,
  DescripcionProveedor VARCHAR2(45),
  idDistritos NUMBER,
  CONSTRAINT fk_Proveedor_Distritos1 FOREIGN KEY (idDistritos) REFERENCES Distritos (idDistritos)
);

CREATE TABLE Producto (
  idProductos NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Nombre VARCHAR2(45),
  Cantidad NUMBER NOT NULL,
  Descripcion VARCHAR2(45),
  Precio NUMBER(10,2),
  Activo VARCHAR2(45),
  idCategorias NUMBER NOT NULL,
  idProveedor NUMBER NOT NULL,
  CONSTRAINT fk_Productos_Categorias FOREIGN KEY (idCategorias) REFERENCES Categorias (idCategorias),
  CONSTRAINT fk_Producto_Proveedor1 FOREIGN KEY (idProveedor) REFERENCES Proveedor (idProveedor)
);

ALTER TABLE Producto ADD (
  IMAGEN VARCHAR2(100) DEFAULT 'default_product.jpg' NOT NULL
);



CREATE TABLE Comprador (
  idComprador NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Nombre VARCHAR2(45),
  Apellidos VARCHAR2(45),
  Correo VARCHAR2(45),
  idDistritos NUMBER NOT NULL,
  CONSTRAINT fk_Comprador_Distritos1 FOREIGN KEY (idDistritos) REFERENCES Distritos (idDistritos)
);

CREATE TABLE Factura (
  idFactura NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Fecha DATE,
  Total NUMBER(10,2),
  Estado NUMBER,
  idComprador NUMBER,
  CONSTRAINT fk_Factura_Comprador1 FOREIGN KEY (idComprador) REFERENCES Comprador (idComprador)
);

CREATE TABLE Entrega (
  idEntrega NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  DescripcionEntrega VARCHAR2(45),
  fechaEntrega DATE
);

CREATE TABLE Sucursal (
  idSucursal NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NombreSucursal VARCHAR2(45) NOT NULL,
  Distritos_idDistritos NUMBER NOT NULL,
  CONSTRAINT fk_Sucursal_Distritos1 FOREIGN KEY (Distritos_idDistritos) REFERENCES Distritos (idDistritos)
);

CREATE TABLE Venta (
  idVenta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Cantidad NUMBER,
  idProductos NUMBER,
  idFactura NUMBER,
  Entrega_idEntrega NUMBER,
  Sucursal_idSucursal NUMBER,
  CONSTRAINT fk_Venta_Productos1 FOREIGN KEY (idProductos) REFERENCES Producto (idProductos),
  CONSTRAINT fk_Venta_Factura1 FOREIGN KEY (idFactura) REFERENCES Factura (idFactura),
  CONSTRAINT fk_Venta_Entrega1 FOREIGN KEY (Entrega_idEntrega) REFERENCES Entrega (idEntrega),
  CONSTRAINT fk_Venta_Sucursal1 FOREIGN KEY (Sucursal_idSucursal) REFERENCES Sucursal (idSucursal)
);

CREATE TABLE Telefonos (
  idTelefonos NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NumeroTelefono VARCHAR2(45) NOT NULL
);

CREATE TABLE Telefonos_has_Proveedor (
  idTelefonos NUMBER NOT NULL,
  idProveedor NUMBER NOT NULL,
  CONSTRAINT Telefonos_has_Proveedor_PK PRIMARY KEY (idTelefonos, idProveedor),
  CONSTRAINT fk_Telefonos_has_Proveedor_Telefonos1 FOREIGN KEY (idTelefonos) REFERENCES Telefonos (idTelefonos),
  CONSTRAINT fk_Telefonos_has_Proveedor_Proveedor1 FOREIGN KEY (idProveedor) REFERENCES Proveedor (idProveedor)
);

CREATE TABLE Telefonos_has_Comprador (
  idTelefonos NUMBER NOT NULL,
  idComprador NUMBER NOT NULL,
  CONSTRAINT Telefonos_has_Comprador_PK PRIMARY KEY (idTelefonos, idComprador),
  CONSTRAINT fk_Telefonos_has_Comprador_Telefonos1 FOREIGN KEY (idTelefonos) REFERENCES Telefonos (idTelefonos),
  CONSTRAINT fk_Telefonos_has_Comprador_Comprador1 FOREIGN KEY (idComprador) REFERENCES Comprador (idComprador)
);

CREATE TABLE auditoria_usuarios (
  id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario NUMBER,
  accion VARCHAR2(10),
  fecha DATE
);

CREATE TABLE auditoria_productos (
  id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_producto NUMBER,
  accion VARCHAR2(10),
  fecha DATE
);


-- CRUD para Productos

CREATE OR REPLACE PACKAGE PKG_CRUD_PRODUCTOS AS
  TYPE t_cursor IS REF CURSOR;

  FUNCTION FN_OBTENER_PRODUCTOS RETURN t_cursor;
  FUNCTION FN_OBTENER_PRODUCTO(p_id_producto IN NUMBER) RETURN t_cursor;
  FUNCTION FN_BUSCAR_PRODUCTOS(p_busqueda IN VARCHAR2) RETURN t_cursor;

  PROCEDURE SP_AGREGAR_PRODUCTO(
    p_nombre IN VARCHAR2,
    p_cantidad IN NUMBER,
    p_descripcion IN VARCHAR2,
    p_precio IN NUMBER,
    p_activo IN VARCHAR2,
    p_id_categoria IN NUMBER,
    p_imagen IN VARCHAR2,
    p_resultado OUT NUMBER,
    p_id_generado OUT NUMBER
  );

  FUNCTION FN_ACTUALIZAR_PRODUCTO(
    p_id_producto IN NUMBER,
    p_nombre IN VARCHAR2,
    p_cantidad IN NUMBER,
    p_descripcion IN VARCHAR2,
    p_precio IN NUMBER,
    p_activo IN VARCHAR2,
    p_id_categoria IN NUMBER,
    p_imagen IN VARCHAR2
  ) RETURN NUMBER;

  FUNCTION FN_ELIMINAR_PRODUCTO(p_id_producto IN NUMBER) RETURN NUMBER;
END PKG_CRUD_PRODUCTOS;
/


CREATE OR REPLACE PACKAGE BODY PKG_CRUD_PRODUCTOS AS

  FUNCTION FN_OBTENER_PRODUCTOS RETURN t_cursor IS
    v_cursor t_cursor;
  BEGIN
    OPEN v_cursor FOR
      SELECT 
        p.idProductos,
        p.Nombre,
        p.Cantidad,
        p.Descripcion,
        p.Precio,
        p.Activo,
        p.IMAGEN,
        c.idCategorias,
        c.Nombre AS nombre_categoria
      FROM Producto p
      JOIN Categorias c ON p.idCategorias = c.idCategorias
      ORDER BY p.Nombre;

    RETURN v_cursor;
  EXCEPTION
    WHEN OTHERS THEN
      IF v_cursor%ISOPEN THEN
        CLOSE v_cursor;
      END IF;
      RAISE;
  END FN_OBTENER_PRODUCTOS;

  FUNCTION FN_OBTENER_PRODUCTO(p_id_producto IN NUMBER) RETURN t_cursor IS
    v_cursor t_cursor;
  BEGIN
    OPEN v_cursor FOR
      SELECT 
        p.idProductos,
        p.Nombre,
        p.Cantidad,
        p.Descripcion,
        p.Precio,
        p.Activo,
        p.IMAGEN,
        c.idCategorias,
        c.Nombre AS nombre_categoria
      FROM Producto p
      JOIN Categorias c ON p.idCategorias = c.idCategorias
      WHERE p.idProductos = p_id_producto;

    RETURN v_cursor;
  EXCEPTION
    WHEN OTHERS THEN
      IF v_cursor%ISOPEN THEN
        CLOSE v_cursor;
      END IF;
      RAISE;
  END FN_OBTENER_PRODUCTO;

  FUNCTION FN_BUSCAR_PRODUCTOS(p_busqueda IN VARCHAR2) RETURN t_cursor IS
    v_cursor t_cursor;
  BEGIN
    OPEN v_cursor FOR
      SELECT 
        p.idProductos,
        p.Nombre,
        p.Cantidad,
        p.Descripcion,
        p.Precio,
        p.Activo,
        p.IMAGEN,
        c.Nombre AS nombre_categoria
      FROM Producto p
      JOIN Categorias c ON p.idCategorias = c.idCategorias
      WHERE UPPER(p.Nombre) LIKE '%' || UPPER(p_busqueda) || '%'
         OR UPPER(p.Descripcion) LIKE '%' || UPPER(p_busqueda) || '%'
      ORDER BY p.Nombre;

    RETURN v_cursor;
  EXCEPTION
    WHEN OTHERS THEN
      IF v_cursor%ISOPEN THEN
        CLOSE v_cursor;
      END IF;
      RAISE;
  END FN_BUSCAR_PRODUCTOS;

  PROCEDURE SP_AGREGAR_PRODUCTO(
    p_nombre IN VARCHAR2,
    p_cantidad IN NUMBER,
    p_descripcion IN VARCHAR2,
    p_precio IN NUMBER,
    p_activo IN VARCHAR2,
    p_id_categoria IN NUMBER,
    p_imagen IN VARCHAR2,
    p_resultado OUT NUMBER,
    p_id_generado OUT NUMBER
  ) IS
  BEGIN
    p_resultado := 0;
    p_id_generado := NULL;

    INSERT INTO Producto (
      Nombre, Cantidad, Descripcion, Precio, 
      Activo, idCategorias, IMAGEN
    ) VALUES (
      p_nombre, p_cantidad, p_descripcion, p_precio,
      p_activo, p_id_categoria, p_imagen
    ) RETURNING idProductos INTO p_id_generado;

    p_resultado := 1;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      p_resultado := -1;
      ROLLBACK;
  END SP_AGREGAR_PRODUCTO;

  FUNCTION FN_ACTUALIZAR_PRODUCTO(
    p_id_producto IN NUMBER,
    p_nombre IN VARCHAR2,
    p_cantidad IN NUMBER,
    p_descripcion IN VARCHAR2,
    p_precio IN NUMBER,
    p_activo IN VARCHAR2,
    p_id_categoria IN NUMBER,
    p_imagen IN VARCHAR2
  ) RETURN NUMBER IS
    v_resultado NUMBER := 0;
  BEGIN
    UPDATE Producto SET
      Nombre = p_nombre,
      Cantidad = p_cantidad,
      Descripcion = p_descripcion,
      Precio = p_precio,
      Activo = p_activo,
      idCategorias = p_id_categoria,
      IMAGEN = p_imagen
    WHERE idProductos = p_id_producto;

    v_resultado := SQL%ROWCOUNT;
    COMMIT;

    RETURN v_resultado;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RETURN -1;
  END FN_ACTUALIZAR_PRODUCTO;

  FUNCTION FN_ELIMINAR_PRODUCTO(p_id_producto IN NUMBER) RETURN NUMBER IS
    v_resultado NUMBER := 0;
  BEGIN
    UPDATE Producto SET
      Activo = 'No'
    WHERE idProductos = p_id_producto;

    v_resultado := SQL%ROWCOUNT;
    COMMIT;

    RETURN v_resultado;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RETURN -1;
  END FN_ELIMINAR_PRODUCTO;

END PKG_CRUD_PRODUCTOS;
/


SELECT PKG_CRUD_PRODUCTOS.FN_OBTENER_PRODUCTOS() FROM DUAL


-- Obtener categorias
CREATE OR REPLACE PROCEDURE SP_OBTENER_CATEGORIAS_ACTIVAS (
   P_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
   OPEN P_CURSOR FOR
   SELECT idCategorias, Nombre 
   FROM Categorias 
   WHERE Activo = 'Sí' 
   ORDER BY idCategorias;
END;

-- Listar productos por categoria
CREATE OR REPLACE PROCEDURE SP_LISTAR_PRODUCTOS_CATEGORIA (
   P_ID_CATEGORIA IN Producto.idCategorias%TYPE,
   P_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
   OPEN P_CURSOR FOR
   SELECT 
      p.idProductos AS ID_PRODUCTO,
      p.Nombre AS NOMBRE_PRODUCTO,
      p.Descripcion,
      p.Precio,
      p.IMAGEN,
      p.Cantidad
   FROM Producto p
   WHERE p.Activo = 'Sí' AND p.idCategorias = P_ID_CATEGORIA
   ORDER BY p.idProductos;
END;

SELECT * from producto



-- CRUD para Usuarios

CREATE OR REPLACE PROCEDURE SP_REGISTRAR_USUARIO (
  P_NOMBRE IN VARCHAR2,
  P_EMAIL IN VARCHAR2,
  P_TELEFONO IN VARCHAR2,
  P_PASSWORD IN VARCHAR2,
  P_RESULTADO OUT NUMBER,
  P_MENSAJE OUT VARCHAR2,
  P_ID_USUARIO OUT NUMBER
) AS
  v_nombre_trim VARCHAR2(150);
  v_email_trim VARCHAR2(150);
  v_telefono_trim VARCHAR2(30);
  v_existe NUMBER;
BEGIN

  -- Validación y trim de datos
  v_nombre_trim := REGEXP_SUBSTR(TRIM(P_NOMBRE), '^.{1,150}$');
  v_email_trim := REGEXP_SUBSTR(LOWER(TRIM(P_EMAIL)), '^[a-z0-9._%+-]{1,100}@[a-z0-9.-]{1,50}\.[a-z]{2,}$');
  v_telefono_trim := REGEXP_SUBSTR(TRIM(P_TELEFONO), '^[0-9\s+-]{1,30}$');
  
  -- Validar campos requeridos
  IF v_nombre_trim IS NULL THEN
    P_RESULTADO := 0;
    P_MENSAJE := 'El nombre es requerido (máx 150 caracteres)';
    RETURN;
  ELSIF v_email_trim IS NULL THEN
    P_RESULTADO := 0;
    P_MENSAJE := 'Email inválido o excede límite de caracteres';
    RETURN;
  ELSIF LENGTH(P_PASSWORD) < 8 OR LENGTH(P_PASSWORD) > 512 THEN
    P_RESULTADO := 0;
    P_MENSAJE := 'La contraseña debe tener entre 8 y 512 caracteres';
    RETURN;
  END IF;
  
  -- Verificar si el email ya existe
  SELECT COUNT(*) INTO v_existe FROM Usuarios WHERE email = v_email_trim;
  
  IF v_existe > 0 THEN
    P_RESULTADO := 0;
    P_MENSAJE := 'El correo electrónico ya está registrado';
  ELSE
    -- Insertar nuevo usuario
    INSERT INTO Usuarios (
      nombre, 
      email, 
      telefono, 
      password, 
      tipo_usuario
    ) VALUES (
      v_nombre_trim,
      v_email_trim,
      v_telefono_trim,
      P_PASSWORD,
      'cliente'
    ) RETURNING idUsuario INTO P_ID_USUARIO;
    
    P_RESULTADO := 1;
    P_MENSAJE := 'Usuario registrado exitosamente';
    COMMIT;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    P_RESULTADO := 0;
    P_MENSAJE := 'Error al registrar usuario. Intente nuevamente.';
    ROLLBACK;
END;


CREATE OR REPLACE PROCEDURE SP_AUTENTICAR_USUARIO (
  P_EMAIL IN VARCHAR2,
  P_PASSWORD_PLAIN IN VARCHAR2,
  P_RESULTADO OUT NUMBER,
  P_MENSAJE OUT VARCHAR2,
  P_ID_USUARIO OUT NUMBER,
  P_NOMBRE OUT VARCHAR2,
  P_TIPO_USUARIO OUT VARCHAR2,
  P_EMAIL_USUARIO OUT VARCHAR2
) AS
  v_password_hash VARCHAR2(512);
  v_activo VARCHAR2(3);
BEGIN
  P_ID_USUARIO := NULL;
  P_NOMBRE := NULL;
  P_TIPO_USUARIO := NULL;
  P_EMAIL_USUARIO := NULL;
  
  BEGIN
    SELECT 
      idUsuario, 
      SUBSTR(nombre, 1, 150), 
      password, 
      SUBSTR(tipo_usuario, 1, 20), 
      activo,
      SUBSTR(email, 1, 150)
    INTO 
      P_ID_USUARIO, 
      P_NOMBRE, 
      v_password_hash, 
      P_TIPO_USUARIO, 
      v_activo,
      P_EMAIL_USUARIO
    FROM Usuarios
    WHERE email = LOWER(TRIM(P_EMAIL));
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_RESULTADO := 0;
        P_MENSAJE := 'Usuario no encontrado';
        RETURN;
      WHEN OTHERS THEN
        P_RESULTADO := 0;
        P_MENSAJE := 'Error al buscar usuario: ' || SQLERRM;
        RETURN;
  END;
  
  -- Verificar cuenta activa
  IF v_activo = 'No' THEN
    P_RESULTADO := 0;
    P_MENSAJE := 'Cuenta inactiva';
    RETURN;
  END IF;
  
  IF v_password_hash IS NOT NULL THEN
    P_RESULTADO := 1;
    P_MENSAJE := 'Autenticación exitosa (modo depuración)';
  ELSE
    P_RESULTADO := 0;
    P_MENSAJE := 'Credenciales incorrectas';
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    P_RESULTADO := 0;
    P_MENSAJE := 'Error en autenticación. Código: ' || SQLCODE || ' - ' || SUBSTR(SQLERRM, 1, 100);
END;


CREATE OR REPLACE FUNCTION VERIFICAR_PASSWORD (
  P_PASSWORD_PLAIN IN VARCHAR2,
  P_PASSWORD_HASH IN VARCHAR2
) RETURN NUMBER IS
BEGIN

  IF P_PASSWORD_HASH LIKE '%' || P_PASSWORD_PLAIN || '%' THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END;

CREATE OR REPLACE PROCEDURE SP_OBTENER_USUARIO_POR_EMAIL (
  P_EMAIL IN VARCHAR2,
  P_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN P_CURSOR FOR
  SELECT 
    idUsuario AS "IDUSUARIO",
    nombre AS "NOMBRE",
    password AS "PASSWORD",
    tipo_usuario AS "TIPO_USUARIO",
    activo AS "ACTIVO",
    email AS "EMAIL"
  FROM Usuarios
  WHERE email = LOWER(TRIM(P_EMAIL));
END;



CREATE OR REPLACE PROCEDURE SP_OBTENER_DATOS_USUARIO (
  P_ID_USUARIO IN NUMBER,
  P_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN P_CURSOR FOR
  SELECT 
    nombre AS "NOMBRE",
    email AS "EMAIL",
    telefono AS "TELEFONO",
    tipo_usuario AS "TIPO_USUARIO"
  FROM Usuarios
  WHERE idUsuario = P_ID_USUARIO;
END;

CREATE OR REPLACE PROCEDURE SP_OBTENER_USUARIO_POR_ID (
  P_ID_USUARIO IN NUMBER,
  P_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN P_CURSOR FOR
  SELECT 
    idUsuario,
    nombre,
    email,
    tipo_usuario,
    activo
  FROM Usuarios
  WHERE idUsuario = P_ID_USUARIO;
END;

CREATE OR REPLACE PROCEDURE SP_OBTENER_TIPO_USUARIO (
  P_ID_USUARIO IN NUMBER,
  P_TIPO_USUARIO OUT VARCHAR2
) AS
BEGIN
  SELECT tipo_usuario INTO P_TIPO_USUARIO
  FROM Usuarios
  WHERE idUsuario = P_ID_USUARIO;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    P_TIPO_USUARIO := 'NO_ENCONTRADO';
END;


CREATE OR REPLACE PROCEDURE SP_VERIFICAR_ADMIN (
  P_ID_USUARIO IN NUMBER,
  P_ES_ADMIN OUT NUMBER
) AS
  V_TIPO VARCHAR2(30);
BEGIN
  SELECT tipo_usuario INTO V_TIPO
  FROM Usuarios
  WHERE idUsuario = P_ID_USUARIO;
  
  IF V_TIPO = 'administrador' THEN
    P_ES_ADMIN := 1; -- Es administrador
  ELSE
    P_ES_ADMIN := 0; -- No es administrador
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    P_ES_ADMIN := 0; -- Usuario no encontrado
END SP_VERIFICAR_ADMIN;


CREATE OR REPLACE PROCEDURE SP_LISTAR_USUARIOS (
  P_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN P_CURSOR FOR
  SELECT 
    idUsuario AS "ID",
    nombre AS "NOMBRE",
    email AS "EMAIL",
    telefono AS "TELEFONO",
    tipo_usuario AS "TIPO_USUARIO"
  FROM Usuarios
  ORDER BY idUsuario ASC;
END SP_LISTAR_USUARIOS;



CREATE OR REPLACE PROCEDURE SP_INSERTAR_USUARIO (
  P_NOMBRE IN VARCHAR2,
  P_EMAIL IN VARCHAR2,
  P_TELEFONO IN VARCHAR2,
  P_PASSWORD IN VARCHAR2,
  P_TIPO_USUARIO IN VARCHAR2,
  P_RESULTADO OUT NUMBER
) AS
BEGIN
  P_RESULTADO := 0;
  
  INSERT INTO Usuarios (nombre, email, telefono, password, tipo_usuario)
  VALUES (P_NOMBRE, P_EMAIL, P_TELEFONO, P_PASSWORD, P_TIPO_USUARIO);
  
  P_RESULTADO := 1; -- Éxito
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    P_RESULTADO := -1; -- Error
    ROLLBACK;
END SP_INSERTAR_USUARIO;


CREATE OR REPLACE PROCEDURE SP_ELIMINAR_USUARIO (
  P_ID_USUARIO IN NUMBER,
  P_RESULTADO OUT NUMBER
) AS
BEGIN
  P_RESULTADO := 0;
  
  DELETE FROM Usuarios
  WHERE idUsuario = P_ID_USUARIO;
  
  IF SQL%ROWCOUNT = 1 THEN
    P_RESULTADO := 1; -- Éxito
  END IF;
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    P_RESULTADO := -1; -- Error
    ROLLBACK;
END SP_ELIMINAR_USUARIO;


CREATE OR REPLACE FUNCTION FN_OBTENER_USUARIO(
    p_id_usuario IN NUMBER
) RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT nombre, email, telefono, tipo_usuario
    FROM Usuarios
    WHERE idUsuario = p_id_usuario;
    
    RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_USUARIO(
    p_id_usuario IN NUMBER,
    p_nombre IN VARCHAR2,
    p_email IN VARCHAR2,
    p_telefono IN VARCHAR2,
    p_tipo IN VARCHAR2,
    p_resultado OUT NUMBER
) IS
BEGIN
    p_resultado := 0;
    
    UPDATE Usuarios
    SET nombre = p_nombre,
        email = p_email,
        telefono = p_telefono,
        tipo_usuario = p_tipo
    WHERE idUsuario = p_id_usuario;
    
    p_resultado := SQL%ROWCOUNT;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        p_resultado := -1;
        ROLLBACK;
END;

select * from usuarios

-- PKG para Triggers

CREATE OR REPLACE PACKAGE pkg_triggers AS
  PROCEDURE registrar_cambio_usuario(p_accion VARCHAR2, p_idUsuario NUMBER);
  PROCEDURE registrar_cambio_producto(p_accion VARCHAR2, p_idProducto NUMBER);
END pkg_triggers;


CREATE OR REPLACE PACKAGE BODY pkg_triggers AS

  PROCEDURE registrar_cambio_usuario(p_accion VARCHAR2, p_idUsuario NUMBER) IS
  BEGIN
    -- Ejemplo: Insertar en tabla de auditoría (que deberías crear)
    INSERT INTO auditoria_usuarios (
      id_usuario, accion, fecha
    ) VALUES (
      p_idUsuario, p_accion, SYSDATE
    );
  EXCEPTION
    WHEN OTHERS THEN
    NULL;
  END registrar_cambio_usuario;

  PROCEDURE registrar_cambio_producto(p_accion VARCHAR2, p_idProducto NUMBER) IS
  BEGIN
    INSERT INTO auditoria_productos (
      id_producto, accion, fecha
    ) VALUES (
      p_idProducto, p_accion, SYSDATE
    );
  EXCEPTION
    WHEN OTHERS THEN
    NULL;
  END registrar_cambio_producto;

END pkg_triggers;


-- Usuarios
CREATE OR REPLACE TRIGGER trg_usuarios_audit
AFTER INSERT OR UPDATE OR DELETE ON Usuarios
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    pkg_triggers.registrar_cambio_usuario('INSERT', :NEW.idUsuario);
  ELSIF UPDATING THEN
    pkg_triggers.registrar_cambio_usuario('UPDATE', :NEW.idUsuario);
  ELSIF DELETING THEN
    pkg_triggers.registrar_cambio_usuario('DELETE', :OLD.idUsuario);
  END IF;
END;

-- Producto
CREATE OR REPLACE TRIGGER trg_productos_audit
AFTER INSERT OR UPDATE OR DELETE ON Producto
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    pkg_triggers.registrar_cambio_producto('INSERT', :NEW.idProductos);
  ELSIF UPDATING THEN
    pkg_triggers.registrar_cambio_producto('UPDATE', :NEW.idProductos);
  ELSIF DELETING THEN
    pkg_triggers.registrar_cambio_producto('DELETE', :OLD.idProductos);
  END IF;
END;


Select * from auditoria_productos

SELECT * from auditoria_usuarios




